#!/usr/bin/env node

const debug = require('debug')('tech-challenge-ff-node:server');
const http = require('http');

const app = require('./app');

const dataStore = require('./persistence/simple.store').default;
const bulkMockData = require('../mock/articles/articles.mock.json');

function loadMockData() {
  try {
    bulkMockData.forEach((o) => dataStore.add(o));
  } catch (err) {
    console.error(`failed to load all mock data: ${err}`);
  }

  return dataStore.getAll().length;
}

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
server.listen(port);

/* Event listener for HTTP server "error". */
/* eslint no-console: 0 */
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

/* Event listener for HTTP server "listening" */
server.on('listening', () => {
  // load mock articles
  const mockCount = loadMockData();
  debug(`Mock data load to data store: ${mockCount}`);

  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
});
